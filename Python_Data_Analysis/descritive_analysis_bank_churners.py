# -*- coding: utf-8 -*-
"""Descritive_analysis_bank_churners.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ei5TnMV4_uraIA0-KYDrDfuLIx7foMJC

This data is from Kaggle, used to predict churn. The origin is https://www.kaggle.com/datasets/sakshigoyal7/credit-card-customers/data
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Load bank_churners data
churners_data = pd.read_csv('BankChurners.csv')

# Display the first few rows of the dataframe to understand its structure
print("First few rows of the churners data:")
print(churners_data.head())

"""#Statistics Summary"""

# Summary statistics of numerical columns
print("Summary statistics of numerical columns:")
print(churners_data.describe())

"""Summary based on the provided numerical columns:

Client Statistics:

* Mean client number: 7.391776e+08
* Mean customer age: 46.33 years
* Mean dependent count: 2.35
* Mean months on book: 35.93
* Mean total relationship count: 3.81
* Mean months inactive in the last 12 months: 2.34
* Mean contacts count in the last 12 months: 2.46

Credit Statistics:

* Mean credit limit:  8631.95
* Mean total revolving balance: 1162.81
* Mean average open to buy: 7469.14
* Mean total amount change Q4-Q1: 0.76
* Mean total transaction amount: 4404.09
* Mean total transaction count: 64.86
* Mean total count change Q4-Q1: 0.71
* Mean average utilization ratio: 0.27

Naive Bayes Classifier Statistics:

* Mean Naive Bayes Classifier (Attrition Flag - Card Category - Contacts Count 12 mon - Dependent count - Education Level - Months Inactive 12 mon - 1): 0.159997
* Mean Naive Bayes Classifier (Attrition Flag - Card Category - Contacts Count 12 mon - Dependent count - Education Level - Months Inactive 12 mon - 2): 0.840003

These statistics provide an overview of the numerical features in the dataset, including client demographics, credit-related information, and classifier statistics.
"""

# Check for missing values
print("Missing values:")
print(churners_data.isnull().sum())

"""#Correlations Matrix"""

# Correlation matrix
correlation_matrix = churners_data.corr()
print("Correlation matrix:")
print(correlation_matrix)

"""The provided correlation matrix represents the pairwise correlations between numerical features in the dataset. Here's a summary:

Positive Correlations:

* Customer Age is positively correlated with Months on Book (0.788912).
* Total Transaction Amount is positively correlated with Total    
* Transaction Count (0.807192).
* Total Revolving Balance is positively correlated with Avg Utilization Ratio (0.624022).

Negative Correlations:

* Avg Utilization Ratio is negatively correlated with Credit Limit (-0.482965).
* Total Relationship Count is negatively correlated with Total
* Transaction Amount (-0.347229).
* Total Transaction Count is negatively correlated with Naive Bayes Classifier (Attrition Flag - Card Category - Contacts Count 12 mon - Dependent count - Education Level - Months Inactive 12 mon - 1) (-0.371403).

Weak Correlations:

There are weak correlations (close to 0) between many pairs of features, indicating little linear relationship between them.
This correlation matrix provides valuable insights into how features are related to each other within the dataset. However, it's important to note that correlation doesn't imply causation, and further analysis may be needed to understand the relationships between variables more deeply.
"""

# Visualization: Pairplot
sns.pairplot(churners_data)
plt.title('Pairplot of churners Data')
plt.show()

# Visualization: Correlation Heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Heatmap of churners Data')
plt.show()